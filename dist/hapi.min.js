haPi.controller("AlarmController",["$rootScope","$scope","$http","$modal","Alarm","socket",function($rootScope,$scope,$http,$modal,Alarm,socket){"use strict";$scope.updateAlarmPanel=function(alarm){$(".alarm-list-accordion .panel").each(function(){var checked=$(this).find("input.enable-checkbox");checked.hasClass("is-checked")?$(this).removeClass("panel-default").addClass("panel-success"):$(this).removeClass("panel-success").addClass("panel-default")}),alarm&&socket.emit("alarm:update",{alarm:{_id:alarm._id,update:{enable:alarm.enable,repeat:alarm.repeat}}})},$rootScope.$on("socket:connected",function(){console.log("connected"),socket.on("alarm:remove",function(data){var index=-1;$.each($scope.alarmList,function(key,value){value._id===data.alarm._id&&(console.log("found"),index=key)}),index>-1&&$scope.alarmList.splice(index,1),$scope.updateAlarmPanel()}),socket.on("alarm:new",function(data){if(data.error)console.log("error");else{if($scope.alarmList.push(new Alarm(data.alarm._id,data.alarm.time,data.alarm.enable,data.alarm.repeat)),jQuery().snackbar){var options={content:"Alarm added",style:"toast",timeout:3e3};$.snackbar(options)}$scope.updateAlarmPanel()}},{unique:!0}),socket.on("alarm:update",function(data){var index;$.each($scope.alarmList,function(key,value){value._id===data.alarm._id&&(index=key)}),index&&($scope.alarmList[index].time=data.alarm.time,$scope.alarmList[index].repeat=data.alarm.repeat,$scope.alarmList[index].enable=data.alarm.enable,$scope.updateAlarmPanel())})}),$scope["delete"]=function(alarm){alarm["delete"]()},$scope.getAlarmList=function(){$rootScope.$broadcast("pageLoading:updated",!0),$scope.alarmList=[],Alarm.get(function(list){$scope.alarmList=list,$rootScope.$broadcast("pageLoading:updated",!1),$scope.updateAlarmPanel()})},$scope.alarmList=[],$scope.getAlarmList(),$scope.$on("ngRepeatFinished",function(){$scope.updateAlarmPanel()}),$scope.open=function(){var modalInstance=$modal.open({templateUrl:"myModalContent.html",controller:"AlarmModalInstanceCtrl",size:"sm",resolve:{items:function(){return $scope.items}}});modalInstance.result.then(function(){},function(){})},$scope.timeOfDay=function(alarm){return alarm.getTimeOfDay()}}]),haPi.controller("AlarmModalInstanceCtrl",function($scope,$modalInstance,Alarm){"use strict";$scope.cancel=function(){$modalInstance.dismiss(),$scope.deleteNewAlarm()},$scope.deleteNewAlarm=function(){$scope.newAlarm=new Alarm;var d=new Date;d.setHours(9),d.setMinutes(0),$scope.newAlarm.time=d},$scope.insertAlarm=function(){$("#btn-submit-new").prop("disabled",!0),$("#btn-cancel-new").prop("disabled",!0),$scope.newAlarm.enable=!0,$scope.newAlarm.add(),$modalInstance.close({status:"success"})},$scope.deleteNewAlarm()}),haPi.controller("AlarmSettingsController",["$scope","$rootScope","$state","$stateParams","MusicPlayerService","Artist",function($scope,$rootScope,$state,$stateParams,MusicPlayerService,Artist){"use strict";$scope.artists=[],Artist.getMyArtists(function(data){"SUCCESS"===data.status&&($scope.artists=data.data.artists)}),$scope.refreshArtists=function(){Artist.refreshMyArtists(function(data){"SUCCESS"===data.status&&($scope.artists=data.data.artists)})}}]),haPi.controller("ArtistController",["$scope","$rootScope","$state","$stateParams","MusicPlayerService","Artist",function($scope,$rootScope,$state,$stateParams,MusicPlayerService,Artist){"use strict";var artist=new Artist($stateParams.id,$stateParams.source);artist.get(function(response){$scope.artist=response.data.artist,$scope.setFunctions()}),$scope.msToTime=function(ms){return(ms/6e4).toFixed(2)},$scope.setFunctions=function(){$(".track-line").hover(function(){$(this).css("background-color","#9e9e9e")})},$scope.playAlbum=function(album,startingTrack){var startingKey=0,track={list:album.tracks.items.slice(0)};$.each(album.tracks.items,function(key,value){startingTrack==value&&(startingKey=key)}),startingKey>0&&track.list.splice(0,startingKey-1),MusicPlayerService.play(track)}}]),haPi.controller("LogController",["$scope","$rootScope","$state","$modal","$stateParams","Log",function($scope,$rootScope,$state,$modal,$stateParams,Log){"use strict";$scope.Log=Log,$scope.logs=[],$scope.filteredLogs=[],$scope.levels=Log.levels.slice(),$scope.numPerPage=40,$scope.currentPage=1,$scope.sortedSize=0,$.each($scope.levels,function(key){$scope.levels[key].show=!0}),Log.get(function(logs){$scope.logs=logs,$scope.sortedSize=logs.length,$scope.pageChanged(),console.log(logs)}),$scope.count=function(){var counter=0;return $.each($scope.logs,function(key,log){$.each($scope.levels,function(key,levelData){log.level===levelData.value&&levelData.show&&(counter+=1)})}),counter},$scope.levelFilter=function(log){var filter=!0;return $scope.levels.length>0&&$.each($scope.levels,function(key,levelData){log.level===levelData.value&&levelData.show&&(filter=!1)}),!filter},$scope.numPages=function(){return Math.ceil($scope.logs.length/$scope.numPerPage)},$scope.pageChanged=function(){var begin=($scope.currentPage-1)*$scope.numPerPage,end=begin+$scope.numPerPage;$scope.filteredLogs=$scope.logs.slice(begin,end)},$scope.details=function(log){var modalInstance=$modal.open({templateUrl:"views/logDetails.html",controller:"LogDataModal",resolve:{log:function(){return log}}});modalInstance.result.then(function(){})}}]),haPi.controller("LogDataModal",function($scope,$modalInstance,log){"use strict";$scope.log=log,$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}),haPi.controller("MainController",["$scope","$rootScope","UserService","MusicPlayerService","socket",function($scope,$rootScope,UserService,MusicPlayerService,socket){"use strict";var ctrl=this;this.title="bn",this.user=null,this.pi_logged_in=!1,$scope.volume=50,$scope.player=MusicPlayerService,UserService.getUser(function(){}),$scope.$on("user:updated",function(event,data){ctrl.user=data}),$rootScope.$on("$stateChangeStart",function(event,toState){ctrl.title=toState.name}),$rootScope.$on("pageLoading:updated",function(event,data){ctrl.pageLoading=data}),$rootScope.$on("socket:connected",function(){socket.on("pi:logged-in",function(){ctrl.pi_logged_in=!0}),socket.on("pi:logged-out",function(){ctrl.pi_logged_in=!1}),socket.on("pi:is-logged-in",function(loggedIn){ctrl.pi_logged_in=loggedIn})})}]),haPi.controller("MusicController",["$scope","$rootScope","$state","SpotifyService","Artist",function($scope,$rootScope,$state,SpotifyService,Artist){"use strict";$scope.searchArtistResult=[],$scope.searchArtist=function(){$scope.searchArtistName&&""!==$scope.searchArtistName&&SpotifyService.searchArtist($scope.searchArtistName,function(result){$scope.searchArtistResult=result})},Artist.getMyArtists(function(){}),$scope.seeArtist=function(artist){$state.go("Artist",{source:"spotify",id:artist.id})}}]),haPi.controller("SettingsController",["$scope","$rootScope","$window","GoogleService","SpotifyService","socket",function($scope,$rootScope,$window,GoogleService,SpotifyService,socket){"use strict";$scope.googleService={},$scope.soundcloudService={},$scope.spotify={},$scope.raspberry={},$scope.cpu_labels=["","","","","","","","","","","","","",""],$scope.cpu_data=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0]],socket.emit("pi:ip:get"),socket.on("pi:ip:get",function(data){$scope.raspberry.ip=data.ip}),socket.on("pi:cpu",function(data){var i=0;for($scope.raspberry.cpu=data.cpu,i=1;i<$scope.cpu_data[0].length;i+=1)$scope.cpu_data[0][i-1]=$scope.cpu_data[0][i];$scope.cpu_data[0][$scope.cpu_data[0].length-1]=data.cpu}),$rootScope.$broadcast("pageLoading:updated",!0);var waiting=2;GoogleService.isSignedIn(function(result){waiting-=1,$scope.googleService.isSignedIn=result.data.signed_in,result.data.signed_in&&($scope.googleService.user_info=result.data.user_info),waiting||$rootScope.$broadcast("pageLoading:updated",!1)}),SpotifyService.isSignedIn(function(result){waiting-=1,$scope.spotify.isSignedIn=result.data.signed_in,result.data.signed_in&&($scope.spotify.user_info=result.data.user_info),waiting||$rootScope.$broadcast("pageLoading:updated",!1)}),$scope.google_signIn=function(){GoogleService.getLoginUrl(function(result){$window.open(result.data.connect_url),GoogleService.isSignedIn().success(function(result){$scope.googleService.isSignedIn=result.data.signed_in})})},$scope.google_signOut=function(){GoogleService.signOut(function(){GoogleService.isSignedIn().success(function(result){$scope.googleService.isSignedIn=result.data.signed_in})})},$scope.spotify_signIn=function(){SpotifyService.getLoginUrl(function(result){$window.open(result.data.connect_url),SpotifyService.isSignedIn(function(result){$scope.spotify.isSignedIn=result.data.signed_in})})},$scope.spotify_signOut=function(){SpotifyService.signOut(function(){SpotifyService.isSignedIn(function(result){$scope.spotify.isSignedIn=result.data.signed_in})})},$scope.items=["The first choice!","And another choice for you.","but wait! A third!"],$scope.status={isopen:!1},$scope.toggled=function(){},$scope.toggleDropdown=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.status.isopen=!$scope.status.isopen}}]),haPi.controller("UserController",["$rootScope","$scope","$location","UserService","socket",function($rootScope,$scope,$location,UserService){"use strict";$scope.user_edit={};var ctrl=this;ctrl.previous="/",$scope.login=function(){$rootScope.$broadcast("pageLoading:updated",!0),UserService.login({username:$scope.login.username,password:$scope.login.password},function(response){$rootScope.$broadcast("pageLoading:updated",!1),"SUCCESS"===response.status?$location.path(ctrl.previous):$scope.error=response.data})},$scope.logout=function(){UserService.logout(function(){})},$scope.savePassword=function(){UserService.changePassword($scope.user_edit,function(response){response.error||($scope.user_edit={})})},$scope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState){$rootScope.$broadcast("pageLoading:updated",!1),ctrl.previous=fromState.url,ctrl.previous||(ctrl.previous="/")})}]),haPi.directive("musicMenu",function(){"use strict";return{restrict:"A",link:function(scope,elem){elem.click(function(e){e.stopPropagation()}),$(".slider").noUiSlider({start:scope.player.volume,connect:"lower",range:{min:40,max:100}}),$(".slider").on("slide",function(){scope.$apply(function(){scope.player.volume=Math.round($(".slider").val()),scope.player.setVolume()})})},templateUrl:"views/music-menu.html"}}),haPi.directive("onFinishRender",function($timeout){"use strict";return function(scope){scope.$last&&$timeout(function(){scope.$emit("ngRepeatFinished")})}}),haPi.factory("Alarm",function($http,socket,RequestService){"use strict";function Alarm(_id,time,enable,repeat){this._id=_id,this.time=time,this.enable=null===enable?!0:enable,this.repeat=null===repeat||void 0===repeat?!1:repeat}return Alarm.prototype={getId:function(){return this._id},getTime:function(){return this.time},getTimeOfDay:function(){var dateTmp=new Date(this.time),date=new Date;return date.setHours(dateTmp.getHours()),date.setMinutes(dateTmp.getMinutes()),date},isEnable:function(){return this.enable},add:function(){socket.emit("alarm:add",{alarm:this})},"delete":function(){socket.emit("alarm:remove",{alarm:this})}},Alarm.get=function(callback){RequestService.get("/api/alarms",{},function(response){var alarmList=[];$.each(response.data,function(key,alarm){alarmList.push(new Alarm(alarm._id,alarm.time,alarm.enable,alarm.repeat))}),callback(alarmList)})},Alarm}),haPi.service("EchonestService",["$http","RequestService",function($http,RequestService){"use strict";this.searchSimilarArtist=function(name,callback){RequestService.get("/api/echonest/artist/similar/"+name,{},function(response){callback(response)})},this.searchSongByArtist=function(name,callback){RequestService.get("/api/echonest/song/search/",{artist:name},function(response){callback(response)})},this.getSimilarPlaylist=function(name,callback){RequestService.get("api/echonest/artist/similarSong/"+name,{},function(response){callback(response)})}}]),haPi.service("GoogleService",["$http","RequestService",function($http,RequestService){"use strict";this.isSignedIn=function(callback){RequestService.get("/api/google-auth/isSignedIn",{},callback)},this.getLoginUrl=function(callback){RequestService.get("/api/google-auth/url",{},callback)},this.signOut=function(callback){RequestService.get("/api/google-auth/sign-out",{},callback)}}]),haPi.factory("Log",function($http,socket,RequestService){"use strict";function Log(level,message,date,data){this.level=level,this.message=message,this.date=date,this.data=data}return Log.prototype={getLevel:function(){return this.level},getMessage:function(){return this.message},getDate:function(){return this.date}},Log.logs=[],Log.levels=[{name:"INFO",value:"info"},{name:"LOG",value:"log"},{name:"WARNING",value:"warning"}],Log.get=function(callback){Log.logs=[],RequestService.get("/api/logs",{},function(response){$.each(response.data.logs,function(key,log){Log.logs.push(new Log(log.level,log.message,new Date(log.timestamp),log.data))}),callback(Log.logs)})},Log}),haPi.service("MusicPlayerService",["$http","$rootScope","socket","RequestService",function($http,$rootScope,socket){"use strict";this.volume=80,this.playing=null,this.play=function(track){track.uri?socket.emit("pi:sound:play",{type:"track",track:{uri:track.uri}}):track.list&&socket.emit("pi:sound:play",{type:"trackset",track:track.list})},this.resume=function(){socket.emit("pi:sound:resume",{})},this.pause=function(){socket.emit("pi:sound:pause",{})},this.next=function(){socket.emit("pi:sound:next",{})},this.previous=function(){socket.emit("pi:sound:previous",{})},this.discover=function(){socket.emit("music:discovering",{})},this.getPlaying=function(){socket.emit("music:playing:get",{})},this.searchAndPlay=function(artistName){artistName&&""!==artistName&&socket.emit("pi:sound:search_and_play",{search:{artist:artistName}})},this.setVolume=function(){socket.emit("pi:sound:volume:set",{volume:this.volume})};var self=this;$rootScope.$on("socket:connected",function(){socket.on("pi:notify:sound:volume",function(data){self.volume=data.volume}),socket.on("music:playing",function(data){self.playing=data.track}),socket.emit("pi:sound:volume:get"),socket.emit("music:playing:get")})}]),haPi.service("RequestService",["$http","$location",function($http,$location){"use strict";this.get=function(uri,data,callback){$http.get(uri,{params:data}).success(function(response){globalErrorHandler(response,callback)})},this.post=function(url,data,callback){$http.post(url,data).success(function(response){globalErrorHandler(response,callback)})};var globalErrorHandler=function(response,callback){"ERROR"===response.status&&401===response.data.code?(console.log(401),$location.path("login")):callback(response)}}]),haPi.factory("socket",function($location,$rootScope){"use strict";var socket=null,url=$location.protocol()+"://"+$location.host()+":"+$location.port();return $rootScope.$on("user:updated",function(event,user){socket&&socket.connected||(socket=io.connect(url,{query:"token="+user.token})),socket.on("connect",function(){$rootScope.$emit("socket:connected"),socket.emit("pi:is-logged-in")}),socket.on("error",function(error){"UnauthorizedError"===error.type||"invalid_token"===error.code?($rootScope.$emit("socket:unauthorized"),$rootScope.$broadcast("socket:unauthorized"),$location.path("login")):console.log(error)})}),{on:function(eventName,callback,options){socket&&(options&&options.unique&&(console.log("remove",eventName),socket.removeListener(eventName,callback)),socket.on(eventName,function(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})}))},emit:function(eventName,data,callback){socket?socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})}):console.log(socket)},remove:function(eventName,callback){socket&&socket.removeListener(eventName,callback)}}}),haPi.service("SoundcloudService",["$http",function($http){"use strict";this.isSignedIn=function(){return $http.get("/api/soundcloud/isSignedIn")},this.getLoginUrl=function(){return $http.get("/api/soundcloud/url")},this.signOut=function(){return $http.get("/api/soundcloud/sign-out")}}]),haPi.service("SpotifyService",["$http","RequestService",function($http,RequestService){"use strict";this.isSignedIn=function(callback){RequestService.get("/api/spotify/isSignedIn",{},callback)},this.getLoginUrl=function(callback){RequestService.get("/api/spotify/sign-in/url",{},callback)},this.signOut=function(){},this.searchArtist=function(artistName,callback){RequestService.get("/api/spotify/search/artist/"+artistName,{},function(result){callback(result.data.result.artists.items)})},this.getArtist=function(id,callback){RequestService.get("/api/spotify/artist/"+id,{},function(result){callback(result)})}}]),haPi.service("UserService",["$http","$rootScope","RequestService",function($http,$rootScope,RequestService){"use strict";this.user=null,this.login=function(data,callback){var requestService=this;RequestService.post("/user/login",data,function(response){"SUCCESS"===response.status&&(requestService.user=response.data,$rootScope.$broadcast("user:updated",response.data)),callback(response)})},this.isAuthorized=function(callback){var service=this;null===this.user?this.getUser(function(){callback(null===service.user?!1:!0)}):callback(!0)},this.logout=function(callback){var requestService=this;this.user=null,RequestService.get("/user/logout",{},function(response){requestService.user=null,$rootScope.$broadcast("user:updated",requestService.user),callback(response)})},this.getUser=function(callback){var requestService=this;RequestService.get("/user",{},function(response){"SUCCESS"===response.status?(requestService.user=response.data,$rootScope.$broadcast("user:updated",requestService.user)):requestService.user=null,callback(response)})},this.changePassword=function(user,callback){if(user&&user.oldPassword&&user.newPassword&&user.newPassword===user.confirmPassword){var data={oldPassword:user.oldPassword,newPassword:user.newPassword,confirmPassword:user.confirmPassword};RequestService.post("/user/edit-password",data,function(response){callback("SUCCESS"===response.status?response:response)})}}}]),haPi.service("UtilsService",["$http",function(){"use strict";this.jsonResponse=function(){}}]),haPi.factory("Artist",["$http","$cacheFactory","RequestService","SpotifyService",function($http,$cacheFactory,RequestService,SpotifyService){"use strict";var Artist=function(id,source,name,img){this.source=source,this.id=id,this.name=name,this.img=img};return Artist.cache=$cacheFactory("artist"),Artist.saved=null,Artist.prototype.get=function(callback){"spotify"===this.source&&SpotifyService.getArtist(this.id,callback)},Artist.getMyArtists=function(callback){RequestService.get("/api/artists/my",{},callback)},Artist.refreshMyArtists=function(callback){RequestService.get("/api/artists/refresh",{},callback)},Artist}]);